package test20190304;
/*==================================
 ■■■ 클래스 고급 ■■■
 - 상속 (Inheritance)
==================================*/


/*
	※ 『super』
		static 으로 선언되지 않은 메소드에서 사용되며
		현재 클래스가 상속받은 상위 클래스의 객체를 가리킨다.
		super는 상위 클래스의 생성자를 호출하거나
		상위 클래스의 멤버 변수 또는 메소드를 호출할 때 사용할 수 있다.

		하위 클래스의 생성자에서 상위 클래스의 생성자를 호출할 때에는
		하위 클래스의 생성자 정의 구문에서 맨 처음에만 위치 할 수 있다.

	※ 생성자와 클래스 상속 간의 관계

		하위 클래스는 상위클래스의 멤버를 상속받지만
		생성자는 상속 대상에서 제외된다.
		그리고 하위 클래스의 생성자가 호출될 때
		자동으로 상위 클래스의 생성자가 호출된다.
		이 때, 상위 클래스의 생성자는 인수가 없는 생성자(default)가 호출된다. 

		상위 클래스 및 하위 클래스를 설계하는 과정에서
		생성자를 정의하지(작성하지) 않거나 인수가 없는 생성자만을 정의한(작성한) 경우
		명시적으로 하위 클래스에서 상위 클래스의 생성자를 호출하지 않아도 
		아무런 문제가 발생하지 않지만
		상위 클래스에 인자가 있는 생성자만 존재하는 경우 주의해야 한다. 

		예를 들어 다음에서...
		
		class A_class
		{
			A_class(int n)
			{
			}
		}

		class B_class extends A_class
		{
			B_class()
			{
				// super();
			}	
		}

		하위 클래스인 B_class의 생성자에서 
		명시적으로 A_class 의 생성자를 호출하지 않으면
		자동적으로 인자가 없는 생성자를 호출한다.
		하지만, A_class에는 인자가 있는 생성자만 존재하고 
		인지가 없는 생성자는 존재하지 않기 때문에 에러 발생한다.
		따라서 B_class 생성자 선두에
		다음처럼 명시적으로 상위 클래스의 생성자를 호출해야 한다.
		
		class A_class
		{
			A_class(int n)
			{
			}
		}

		class B_class extends A_class
		{
			B_class()
			{
				super(10);
				....;
				....;
			}	
		}

		===============================================================
			상위 클래스		|	   하위 클래스			|	  결과 
		===============================================================
			생성자를		|	생성자 정의 안함		| → 가능하다.
			정의하지		|	인수가 없는 생성자		| → 가능하다.
			않음			|	인수가 있는 생성자		| → 가능하다.
		---------------------------------------------------------------
			인수가			|	생성자 정의 안함		| → 가능하다.
			없는			|	인수가 없는 생성자		| → 가능하다.
			생성자만 정의 	|	인수가 있는 생성자		| → 가능하다. 
		---------------------------------------------------------------
			인수가			|	생성자 정의 안함		| → 에러 발생 
			있는			|	인수가 없는 생성자		| → 상위 클래스의 해당 생성자 호출하지 않으면 에러 발생 
			생성자만 정의 	|	인수가 있는 생성자		| → == 인수 있는 생성자를 호출하지 않으면 에러 발생 
		===============================================================
		
		※ 상속 시 주의할 사항

		상위 클래스에서 선언된 멤버 변수의 이름과 
		하위 클래스에서 선언한 멤버 변수의 이름이 같으면
		상위 클래스의 멤버 변수는 무시된다.
		이 때, 상위 클래스의 멤버 변수를 사용하기 위해서는
		『super』 키워드를 사용한다.

		동일한 이름의 멤버 변수나 동일한 이름의 메소드가 
		한 클래스 안에 선언되어 있거나 정의되어 있는 경우 기본적으로 에러 발생한다.
		단, 메소드의 경우에는 매개 변수의 갯수나 타입이 다른 경우
		에러가 발생하지 않고 다른 메소드로 취급하게 된다. (Method Overloading)
		→ Method Overriding 과 구분하여 개념을 정리해 둘 것.
		

			
*/
// 부모클래스 
class SuperTest02
{
	protected double area;
	private String title;		//-- 접근제어지시자가 private, 상속 대상에서 제외

	// ※ 생성자는 상속 대상에서 제외된다. 

	public SuperTest02()
	{
		System.out.println("SuperTest02... 인자 없는 생성자");
	}

	public SuperTest02(String title)
	{
		this.title = title;
		System.out.println("SuperTest02... 문자열 인자로 받는 생성자");
	}

	public void write()
	{
		this.title = title;
		System.out.println(title + " - " + area);
	}
}

// SuperTest02를 상속받는 자식 클래스
class Rect extends SuperTest02
{
	/*
	protected double area;
	
	public void write()
	{
		this.title = title;
		System.out.println(title + " - " + area);
	}
	*/

	private int w, h;

	public void calc(int w, int h)
	{
		this.w = w;
		this.h = h;
		// super.area = (double) w * h;
		area = (double) this.w * this.h;	//-- 매개변수로 받은 w, h가 아닌 초기화 한 private w, h로 연산 
		write();
	}
	// 메소드 오버라이딩  - 덮어쓰기. 새로 재정의 되는 것
	/*	
		메소드 오버로딩에서 메소드 이름이 같을 경우 자료형이나 매개변수가 다를 경우 메소드 이름을 같이 쓸 수 있는 문법이 허용되었음. 
		→ 그러나 상속에서는 가능하다. 따로 두 개의 메소드가 존재하는 것이 아니라, 기존의 메소드(부모 클래스)를 새 메소드(자식 클래스)가 덮어 쓰게 된다.
		
		변수와 메소드가 적재되어있는 메모리가 다름 
		메소드는 필요할 때 임시로 메모리에 올려 링크 잡아 쓰는 개념. 
		인스턴스 생성시 - 클래스 전체가 아니라 클래스가 가진 변수만 할당 받는 개념임. 메소드 점검 개념. 
	*/
	
	@Override	//-- 어노테이션(Annotation) : 메타 데이터. 자바에게 알리기 위함. JDK 1.5 부터 지원 되고 있음. 
				// 메타 데이터 
				// 텍스트 기반(이미지, 영상) → 이미지 기반으로 변하면서 사용하게 되었다. 
				// 현재, 멀티미디어에서 보편적으로 사용하게 된 메타 데이터. 

	// public void write(int n) //-- 오버로딩
	public void write() //-- 오버라이딩
	{
		System.out.println("w : " + w + ", h : " + h);
		System.out.println("사각형 → " + area);
	}
	/*	
		※	메소드 오버라이딩(Method Overriding)
			상위 클래스를 상속받은 하위 클래스에서
			상위 클래스에 정의된 메소드를 재정의 하는 것으로 
			객체 지향 프로그래밍의 특징인 다형성을 나타낸다.
			재정의(Overriding)는 반드시 상속 관계가 있어야 하며,
			메소드 이름, 리턴 타입, 매개변수의 갯수나 타입이 
			모두 완전히 일치해야 한다. 
	*/
}

// SuperTest02를 상속받는 자식 클래스
class Circle extends SuperTest02
{
	/*
	protected double area;
	
	public void write()
	{
		this.title = title;
		System.out.println(title + " - " + area);
	}
	*/

	Circle(String title)
	{
		super(title);
	}

	public void calc(int r)
	{
		area = r * r * 3.141592;
		write();
	}
}

// main() 메소드를 포함하고 있는 외부의 다른 클래스 
public class Test107
{
	public static void main(String[] args)
	{
		Rect ob1 = new Rect();
		//--==> SuperTest02... 인자 없는 생성자
		
		// Circle ob2 = new Circle();
		//--==>> 에러발생(컴파일 에러) → 사용자 정의 생성자로 인해
		//								  default 생성자가 삽입되지 않음.

		Circle ob3 = new Circle("원");
		//--==>> SuperTest02... 문자열 인자로 받는 생성자

		ob1.calc(10, 5);
		//--==>> w : 10, h : 5
		//		사각형 →50.0

		ob3.calc(50);
		//--==>> 원 - 7853.9800000000005


	}
}

// 실행 결과
/*
SuperTest02... 인자 없는 생성자
SuperTest02... 문자열 인자로 받는 생성자
w : 10, h : 5
사각형 → 50.0
원 - 7853.9800000000005
계속하려면 아무 키나 누르십시오 . . .
*/