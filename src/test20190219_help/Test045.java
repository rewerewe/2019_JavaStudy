package test20190219_help;
/*=============================================
  ■■■ 실행 흐름의 컨트롤 (제어문) ■■■
  - 반복문(while문) 실습
==============================================*/

// ○실습 문제
// 1부터 100까지의 정수 중에서
// 짝수의 합과 홀수의 합을 따로 구분하여 계산한다.
// 그리고 그 결과값을 출력하는 프로그램을 구현한다.
// 단, 반복문은 while반복문을 사용하며,
// 조건문은 if조건문을 사용하여 작성

// 실행 예)
// 1부터 100까지의 정수 중
// 짝수의 합 : 2550
// 홀수의 합 : 2500
// 계속하려면 아무 키나..


public class Test045
{
	public static void main(String[] args)
	{
		/* (나)
		//주요 변수 선언
		int even=0;
		int	odd=0;
		int n=0;
		int m=0;

		//연산 및 처리
		// 메시지
		System.out.print("1부터 100까지의 정수 중\n짝수의 합 : " + even);
		// 짝수의 합과 홀수의 합을 따로 구분해 계산
		// 합 →짝수끼리의 합 / 홀수끼리의 합
		// 합
		// 틀린점 : 값 커지면서 홀짝 나누기 →n++;
		//			m 따로 X even/odd에 바로 집어넣기
		while (n<=100)
		{	
			//짝수일 때
			if (n%2==0)
			{
				m+=n;
			}
			//홀수일 때
			else 
			{
				m+=n;
			}
			n++;

		}
		*/

		//해설
		int n=1;
		int even=0;
		int odd=0;

		while (n<=100)
		{
			if (n%2==0)
			{
				even += n;
			}
			else if (n%2!=0)
			{
				odd += n;
			}
			else
			{
				System.out.println("판별 불가 데이터");
				return;
			}

			n++;
		}

		// 결고 출력
		System.out.println("1부터 100까지의 정수 중");
		System.out.println("짝수의 합 : " + even);
		System.out.println("홀수의 합 : " + odd);

		// 짝수일때 합 + 홀수일때 합 효율떨어짐
		//반복문 횟수를 적게 쓸수록 리소스 소모 감소
		/*
		// 짝수
		if (n%2==0)
		{
			while (n<=100)
			{
				m+=n;
				n+=2;
			}
			even = m;
		}
		// 홀수
		else if (n%2!=0)
		{
			while (n<=100)
			{
				m+=n;
				n
			}
		*/
	}
}

// 실행 결과
/*
1부터 100까지의 정수 중
짝수의 합 : 2550
홀수의 합 : 2500
계속하려면 아무 키나 누르십시오 . . .
*/