/*======================================
 ■■■ 실행 흐름의 컨트롤 (제어문) ■■■
 - 반복문(while) 실습
=======================================*/

// 0	 1     2           8      -- int = 0; && 증감식 먼저 구성 
// 1     2     3           9	  -- int = 1; && 증감식 나중에 구성
// 1/2 + 2/3 + 3/4 + ... + 9/10

// 실행 예)
// 연산 결과 : xxxxxxx ← 형태로. 
// 연산에 대한 답만 출력하기

public class Test048
{
	public static void main(String[] args)
	{

		// 함께 풀이한 내용
		// ○ 주요 변수 선언 및 초기화
		int n = 0;			//-- 1부터 1씩 증가하게 된 변수 
		double sum = 0;		//-- 누적합을 담을 변수 (실수 형태)


		// ○ 연산 및 처리(반복문 구성)
		while(n < 9)
		{	
			// ※ 증감식 구성 → 최종적으로 반복문의 조건을 무너뜨르게 되는 열쇠
			n++;

			sum += n / (double)(n + 1);  // sum = 1 / 2 --- n증가 --- 마지막 9만 수행됨
										 // a를 b만큼 증가시켜라...
			//--	정수 기반의 나눗셈 연산은 몫을 반환하기 때문에
			//		실수 기반의 연산을 수행할 수 있도록 만들기 위해 
			//		나눗셈 연산자를 중심으로 피연산자 중 하나를 
			//		실수 혀애로 만들어주는 것이 중요하다.

		}
		// ○ 결과 출력

		// System.out.println("연산 결과 : " + sum);
		System.out.printf("연산 결과 : %f\n", sum);



		// 내가 풀이한 내용
		/*
		// 문제 인식 및 분석 
		// 1. 정수(n)를 정수+1(n+1) 로 나눈다 = 담을 변수(a) 선언 
		// 2. 정수는 10까지 반복한다. = 반복문 구성
		// 3. 나눈 값을 누적하여 합한다. = 누적합 변수 (sum) 선언

		// 주요 변수 선언
		int n = 1;
		int a = 0;
		int sum = 0;
		
		// 연산 및 처리

		while (n < 10)
		{
			a = n / (n + 1);

			sum += a;

			n++;
		}

			

		// 결과 출력 
		System.out.println("연산 결과 : " + sum);
		*/

	}
}

// 실행 결과
/*
연산 결과 : 7.071032
계속하려면 아무 키나 누르십시오 . . .
*/
