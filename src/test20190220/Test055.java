/*===========================================
 ■■■ 실행 흐름의 컨드롤 (제어문) ■■■
 - 반복문 (do~while문) 실습
============================================*/

// ○ 실습문제
// 사용자로부터 여러 개의 정수를 입력받아
// 그 합을 계산하여 결과를 출력해주는 프로그램을 구현한다.
// 단, 사용자가 『-1』을 입력 시
// 입력받는 행위를 중지하고
// 그 동안 입력받아둔 정수들의 합을 출력할 수 있도록 구현한다.
// 입력받는 과정은 Scanner 인스턴스를 생성하며 처리한다.

// 실행 예)
// 1번째 정수입력(-1 종료) : 10
// 2번째 정수입력(-1 종료) : 10
// 3번째 정수입력(-1 종료) : 5
// 4번째 정수입력(-1 종료) : 8
// 5번째 정수입력(-1 종료) : 9
// 6번째 정수입력(-1 종료) : -1

// >> 현재까지 입력된 정수의 합 : 42
// 계속하려면 아무키나 누르세요...

import java.util.Scanner;

public class Test055
{
	public static void main(String[] args)
	{
	
	// 함께 풀이한 내용

	// Scanner 인스턴스 생성
	Scanner sc = new Scanner(System.in);

	// ○ 주요 변수 선언
	// 사용자 입력값을 담을 num, 누적합을 담을 sum, 몇 번째 입력값인지 담을 n (1부터 시작하므로 1로 초기화) 
	int num;					
	int sum = 0;
	int n = 1;

	// ○ 연산 및 처리
	do
	{
		System.out.printf("%d번째 정수 입력(-1 종료) : ", n);
		num = sc.nextInt();

		// 입력받은 num 만큼, 누적되어 더해진다.
		sum += num;
		n++;
	}
	while (num != -1);
		
	// ○ 결과 출력 
	
	// 누적합을 출력한다 → 마지막에 입력한 -1까지 출력하므로 sum 에 1을 더해준다.
	System.out.printf("\n>> 현재까지 입력된 정수의 합 : %d\n", (sum+1));



	// 내가 풀이한 내용 
	/*
	// 문제 인식 및 분석
	// 1. 스캐너 인스턴스로 값을 입력 받는다.
	// 2. 입력받는 값을 담을 변수(n)와 1씩 증가하는 변수(p), 누적합을 담을 변수(sum) 3 개를 선언한다. 
	// 3. do~while 구문에 입력받은 변수 누적합(sum)을 넣어 반복한다. 
	// 4. 프린트 구문은 일단 한번 실행되고, 조건에 충족할 때까지 반복 출력할 수 있게 한다.
	//										---- → n == -1 ?? or p < n 
	// 5. 따라서 do~while 구문에 변수 누적합(sum)과 프린트 구문을 넣어야 한다. 


	// 주요 변수 선언
	// 입력받을 n, 1씩 증가할 p, 누적합 담을 sum
	int n = 0, p =1, sum = 0;

	// 연산 및 처리
	// 스캐너 인스턴스 생성
	do
	{
		System.out.printf("%d 번째 정수입력(-1 종료) : ", p);
		Scanner sc = new Scanner(System.in);
		n = sc.nextInt();

									// if 문을 사용해 n == -1이 아닌 경우 >> 현재까지의 정수의 합 을 출력하려 했으나, do~while문 조건을 활용 하면 됨.  
		sum += n;					// sum += p → 증가하는 값만큼 더해주는 것이 아니라, 입력 받은 수 n만큼 더해줘야 한다. 
		p++;

	}
	while (n != -1);
	
	// 결과 출력

			System.out.printf(">> 현재까지 입력된 정수의 합 : %d\n", sum+1);		// sum에 +1를 해주어 마지막 입력되어 종료된 -1을 보완해준다.  

	*/
	}
}

// 실행 결과
/*
1번째 정수 입력(-1 종료) : 10
2번째 정수 입력(-1 종료) : 20
3번째 정수 입력(-1 종료) : 30
4번째 정수 입력(-1 종료) : 40
5번째 정수 입력(-1 종료) : 50
6번째 정수 입력(-1 종료) : -1

>> 현재까지 입력된 정수의 합 : 150
계속하려면 아무 키나 누르십시오 . . .
*/
