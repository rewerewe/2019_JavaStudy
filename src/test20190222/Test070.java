package test20190222;
/* ===============================
 ■■■ 클래스와 인스턴스 ■■■ 
==================================*/

// 직사각형 클래스 설계

/*
 ·	내용 : 직사각형의 넓이와 둘레를 계산, 클래스로 표현.
 ·	클래스의 정체성 → 직사각형
 ·	클래스의 속성 → 가로, 세로	(, 넓이, 둘레, 무게, 색상, 재질, ....... )
 ·	클래스의 기능 → 넓이 계산, 둘레 계산, 가로/세로 입력, 결과 출력 
														   ---------
														   가로 : xxx
														   세로 : xxx
														   넓이 : xxx
														   둘레 : xxx
														

 ※	객체를 구성 → 데이터(속성, 상태) + 기능(행위, 동작)
		|	
		| 설계도	-----------------   --------------- 
		|
	클래스 구성 →		    변수			메소드

*/

// 하나의 파일에 두 개의 class 설계 가능하나, 실무에서는 바람직하지 않다. 
// 여러 개의 클래스 중 파일을 대표할 수 있는 class 하나에만 public접근 제어 지시자를 붙일 수 있다. 

// 클래스
// 객체
// 인스턴스에 대해 찾아보고 정리해보기 

import java.util.Scanner;

class Rect // 직사각형 클래스 설계 
{
	// ○ 변수 선언 (가로/세로)
	// 전역 변수 - 클래스 영역 안에서 글로벌 활동이 가능한 변수 
	// 멤버 변수 - 클래스에 소속되어 있는 요소로써의 의미. class ract에 속하는 멤버다
	// 인스턴스 변수 - 인스턴스가 생성되었을 때 비로소 메모리 할당이 이루어지는 변수 
	//				 - 생성된 인스턴스를 통해 접근 가능한 변수. 메모리를 할당 받아 실체화 되는 시점이 인스턴스 생성시점에 초기화 되기 때문에 
	int w, h;
	

	// ○ 메소드 정의 (가로/세로) 입력
	// - 메소드 이름 명명(명명 규칙 참조)
	// - 매개변수 구성 (정의전에 고민해볼 것)
	// - 반환 자료형 구성 (정의전에 고민해볼 것)
	// - 메소드 내부 정의 
	// ※  『void』는 메소드 실행 후 메소드를 호출한 곳에
	//		결과를 돌려줄 필요가 없을 ?? 지정하게 되는데
	//		아무것도 돌려주지(반환하지) 않는다고 해서 
	//		반환 자료형을 명시하지 않게되면 문법적인 에러가 발생하게 된다.
	//		(반환 자료형을 명시하지 않는 문법은 생성자에서 선점~!!)

	// 메소드가 정의된 순서는 상관 없다. → 메소드 내부에서만 순차적으로 처리되기 때문에 
	// input 메소드는 가로/세로를 입력받아 오는 기능까지만 구현하면 된다. 따라서 매개변수로는 아무것도 받지 않는게 낫다. 
	// 값을 반환하는 메소드일 경우, 반환 자료형을 선언해주어야 한다. 
	// - Rect ob = new Rect;
	// - ob.input();으로 호출했을 때 아무 값도 남겨두지 않는다. void 선언 

	void input()
	{
		// Scanner 인스턴스 생성 
		Scanner sc = new Scanner(System.in);

		System.out.print("가로 입력 : ");
		w = sc.nextInt();

		System.out.print("세로 입력 : ");
		h = sc.nextInt();
	}

	// ○ 메소드 정의 (둘레 계산)
	// 메소드의 실행 후 결과가 정수인 경우를 지정하기 위해
	// 리턴 자료형(반환 자료형)은 int 형을 사용하게 된다.
	// 사각형의 둘레를 구하는 과정에서 필요한 연산은
	// 『(가로 + 세로) * 2』 이며, 이들은 모두 정수이기 때문이다.
	// 또한 넓이나 둘레를 담을 변수를 클래스 내부에 별도로 선언한 것이 아니기 때문에
	// 연산 결과는 메소드를 호출한 곳에 반환하는 형태로 처리되어야 한다. 
	int calLength()
	{
		// 둘레 = (가로+세로)*2
		// 둘레 메소드를 호출한 곳에 값을 두고 온다.
		// 만약, 전역변수 int a,l;를 선언했다면 값을 담아주어도 된다. (계획에 따라 달라지는 것!) 
		return (w + h) * 2;
		// ※ 메소드는 『return』문을 통해서만 
		//	  결과를 돌려주게(반환하게) 된다. 
	}
	
	// ○ 메소드 정의 (넓이 계산)
	int calArea()
	{
		int result;

		result = w * h;

		return result;
	}

	// ○ 메소드 정의 (결과 출력)
	// 매개변수를 통해 데이터를 넘겨받을 수 있도록 정의(갖고 있지 않은 데이터)
	// 메소도의 매개변수는 메소드 내에서만 활동 가능(보이는 영역)
	// 매개변수 선언 시 각각의 변수마다 자료형을 따로 지정해야한다~!!!
	// int a, b(x) → int a, int b(o)

	// 직접 값을 갖고 있지 않기 때문에, 넓이와 둘레는 매개변수로 넘겨 받아야 한다.
	// 구분하고 쪼개고 분리하기 : 출력에만 집중하게끔 정의 하는 게 좋다 
	void print(int a,int l)
	{
		System.out.println("가로 : " + w);
		System.out.println("세로 : " + h);
		System.out.println("넓이 : " + a);
		System.out.println("둘레 : " + l);
	}
}



//	 ※ 하나의 자바 파일(.java)에 여러 개의 클래스(class)를 만들 수 있다.
//		하지만 『public class』는 하나만 올 수 있다.
//		파일을 저장할 때의 이름은 이 『public class』의 이름으로 지정하거나 
//		구성된 모든 클래스가 『public class』가 아닐 경우 
//		이들 중 파일을 대표할 수 있는 클래스를 선택하여
//		해당 클래시의 이름으로 지정해야 한다.
//		또한, 여러개의 클래스가 설계된 하나의 파일을 컴파일 하게 되면
//		내부에 설계된 클래스의 수 만큼 클래스 파일(.class) 이 파생된다. 




// main() 메소드를 포함하고 있는 외부의 다른 클래스
public class Test070
{
	public static void main(String[] args)
	{
		// Rect 클래스 인스턴스 생성 
		// → 10번을 하면 10개의 사각형이 만들어짐 
		Rect ob = new Rect();							//-- 생성된 첫 번째 사각형 

		// 입력 메소드 호출
		ob.input();

		// 넓이 계산, 둘레 계산 메소드 호출
		int area = ob.calArea();
		int length = ob.calLength();

		// 결과 출력 메소드 호출
		// System.out.println(area + " / " + length);
		// 매개 변수를 넣어야 하는데 넣지 않으면 처리되지 않음. 
		ob.print(area, length);
		
		
	}
}

// 실행 결과
/*
가로 입력 : 10
세로 입력 : 20
가로 : 10
세로 : 20
넓이 : 200
둘레 : 60
계속하려면 아무 키나 누르십시오 . . .
*/